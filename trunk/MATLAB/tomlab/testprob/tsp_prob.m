% tsp_prob:
%
% Defines Travelling Salesman Problems (TSP) problems (MILP)
%
% function [probList, Prob] = tsp_prob(P);
%
% INPUT:
%    P      Problem number
%           If isempty(P), return string matrix with problem names
%
% OUTPUT:
%    probList List of Problems
%    Prob     Problem Structure

% Kenneth Holmstrom, Tomlab Optimization Inc., E-mail: tomlab@tomopt.com.
% Copyright (c) 1999-2008 by Tomlab Optimization Inc. $Release: 6.2.0$
% Written June 1, 1999.   Last modified Jun 3, 2008.

function [probList, Prob] = tsp_prob(P, varargin)

if nargin < 1
    P=[];
end

probList=str2mat(...
    'berlin52'...
    ,'bier127'...
    ,'burma14'...
    ,'ch130'...
    ,'eil51'...
    ,'eil76'...
    ,'gr137'...
    ,'gr202'...
    ,'gr96'...
    ,'kroA100'...
    ,'kroA150'...
    ,'kroB200'...
    ,'lin105'...
    ,'pr107'...
    ,'pr124'...
    ,'pr136'...
    ,'pr152'...
    ,'pr76'...
    ,'rat195'...
    ,'rat99'...
    ,'st70'...
    ,'swiss42'...
    ,'u159'...
    ,'ulysses16'...
    ,'ulysses22'); % MAKE COPIES OF THE PREVIOUS ROW AND CHANGE TO NEW NAMES

if isempty(P)
    return
end

x_0 = []; VarWeight = []; KNAPSACK = []; x_min = []; x_max = [];
x_opt = [];

if P == 1
    [Name, m, C, bestKnownSol] = berlin52;
elseif P == 2
    [Name, m, C, bestKnownSol] = bier127;
elseif P == 3
    [Name, m, C, bestKnownSol] = burma14;
elseif P == 4
    [Name, m, C, bestKnownSol] = ch130;
elseif P == 5
    [Name, m, C, bestKnownSol] = eil51;
elseif P == 6
    [Name, m, C, bestKnownSol] = eil76;
elseif P == 7
    [Name, m, C, bestKnownSol] = gr137;
elseif P == 8
    [Name, m, C, bestKnownSol] = gr202;
elseif P == 9
    [Name, m, C, bestKnownSol] = gr96;
elseif P == 10
    [Name, m, C, bestKnownSol] = kroA100;
elseif P == 11
    [Name, m, C, bestKnownSol] = kroA150;
elseif P == 12
    [Name, m, C, bestKnownSol] = kroB200;
elseif P == 13
    [Name, m, C, bestKnownSol] = lin105;
elseif P == 14
    [Name, m, C, bestKnownSol] = pr107;
elseif P == 15
    [Name, m, C, bestKnownSol] = pr124;
elseif P == 16
    [Name, m, C, bestKnownSol] = pr136;
elseif P == 17
    [Name, m, C, bestKnownSol] = pr152;
elseif P == 18
    [Name, m, C, bestKnownSol] = pr76;
elseif P == 19
    [Name, m, C, bestKnownSol] = rat195;
elseif P == 20
    [Name, m, C, bestKnownSol] = rat99;
elseif P == 21
    [Name, m, C, bestKnownSol] = st70;
elseif P == 22
    [Name, m, C, bestKnownSol] = swiss42;
elseif P == 23
    [Name, m, C, bestKnownSol] = u159;
elseif P == 24
    [Name, m, C, bestKnownSol] = ulysses16;
elseif P == 25
    [Name, m, C, bestKnownSol] = ulysses22;
end
C(isnan(C))=0;
[c, A, b_L, b_U, x_L, x_U, IntVars] = makeInput(C);
f_opt = bestKnownSol;
Prob = mipAssign(c, A, b_L, b_U, x_L, x_U, x_0, Name,...
    [], [], IntVars, VarWeight, KNAPSACK, [], [], ...
    [], x_min, x_max, f_opt, x_opt);

Prob.P = P;
Prob.TSP.C = C;
Prob.TSP.bestKnownSol = bestKnownSol;

%NAME: berlin52
%TYPE: TSP
%COMMENT: 52 locations in Berlin (Groetschel)
%DIMENSION: 52
%EDGE_WEIGHT_TYPE: EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = berlin52()
name = 'berlin52';
bestKnownSol = 7542;
m = 52;
xy = [...
    1 565.0 575.0
    2 25.0 185.0
    3 345.0 750.0
    4 945.0 685.0
    5 845.0 655.0
    6 880.0 660.0
    7 25.0 230.0
    8 525.0 1000.0
    9 580.0 1175.0
    10 650.0 1130.0
    11 1605.0 620.0
    12 1220.0 580.0
    13 1465.0 200.0
    14 1530.0 5.0
    15 845.0 680.0
    16 725.0 370.0
    17 145.0 665.0
    18 415.0 635.0
    19 510.0 875.0
    20 560.0 365.0
    21 300.0 465.0
    22 520.0 585.0
    23 480.0 415.0
    24 835.0 625.0
    25 975.0 580.0
    26 1215.0 245.0
    27 1320.0 315.0
    28 1250.0 400.0
    29 660.0 180.0
    30 410.0 250.0
    31 420.0 555.0
    32 575.0 665.0
    33 1150.0 1160.0
    34 700.0 580.0
    35 685.0 595.0
    36 685.0 610.0
    37 770.0 610.0
    38 795.0 645.0
    39 720.0 635.0
    40 760.0 650.0
    41 475.0 960.0
    42 95.0 260.0
    43 875.0 920.0
    44 700.0 500.0
    45 555.0 815.0
    46 830.0 485.0
    47 1170.0 65.0
    48 830.0 610.0
    49 605.0 625.0
    50 595.0 360.0
    51 1340.0 725.0
    52 1740.0 245.0];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction


%NAME : bier127
%COMMENT : 127 Biergaerten in Augsburg (Juenger/Reinelt)
%TYPE : TSP
%DIMENSION : 127
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = bier127()
name = 'bier127';
bestKnownSol = 118282;
m = 127;
xy = [...
    1   9860  14152
    2   9396  14616
    3  11252  14848
    4  11020  13456
    5   9512  15776
    6  10788  13804
    7  10208  14384
    8  11600  13456
    9  11252  14036
    10  10672  15080
    11  11136  14152
    12   9860  13108
    13  10092  14964
    14   9512  13340
    15  10556  13688
    16   9628  14036
    17  10904  13108
    18  11368  12644
    19  11252  13340
    20  10672  13340
    21  11020  13108
    22  11020  13340
    23  11136  13572
    24  11020  13688
    25   8468  11136
    26   8932  12064
    27   9512  12412
    28   7772  11020
    29   8352  10672
    30   9164  12876
    31   9744  12528
    32   8352  10324
    33   8236  11020
    34   8468  12876
    35   8700  14036
    36   8932  13688
    37   9048  13804
    38   8468  12296
    39   8352  12644
    40   8236  13572
    41   9164  13340
    42   8004  12760
    43   8584  13108
    44   7772  14732
    45   7540  15080
    46   7424  17516
    47   8352  17052
    48   7540  16820
    49   7888  17168
    50   9744  15196
    51   9164  14964
    52   9744  16240
    53   7888  16936
    54   8236  15428
    55   9512  17400
    56   9164  16008
    57   8700  15312
    58  11716  16008
    59  12992  14964
    60  12412  14964
    61  12296  15312
    62  12528  15196
    63  15312   6612
    64  11716  16124
    65  11600  19720
    66  10324  17516
    67  12412  13340
    68  12876  12180
    69  13688  10904
    70  13688  11716
    71  13688  12528
    72  11484  13224
    73  12296  12760
    74  12064  12528
    75  12644  10556
    76  11832  11252
    77  11368  12296
    78  11136  11020
    79  10556  11948
    80  10324  11716
    81  11484   9512
    82  11484   7540
    83  11020   7424
    84  11484   9744
    85  16936  12180
    86  17052  12064
    87  16936  11832
    88  17052  11600
    89  13804  18792
    90  12064  14964
    91  12180  15544
    92  14152  18908
    93   5104  14616
    94   6496  17168
    95   5684  13224
    96  15660  10788
    97   5336  10324
    98    812   6264
    99  14384  20184
    100  11252  15776
    101   9744   3132
    102  10904   3480
    103   7308  14848
    104  16472  16472
    105  10440  14036
    106  10672  13804
    107   1160  18560
    108  10788  13572
    109  15660  11368
    110  15544  12760
    111   5336  18908
    112   6264  19140
    113  11832  17516
    114  10672  14152
    115  10208  15196
    116  12180  14848
    117  11020  10208
    118   7656  17052
    119  16240   8352
    120  10440  14732
    121   9164  15544
    122   8004  11020
    123   5684  11948
    124   9512  16472
    125  13688  17516
    126  11484   8468
    127   3248  14152];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction


%NAME: burma14
%TYPE: TSP
%COMMENT: 14-Staedte in Burma (Zaw Win)
%DIMENSION: 14
%EDGE_WEIGHT_TYPE: GEO
%EDGE_WEIGHT_FORMAT: FUNCTION
%DISPLAY_DATA_TYPE: COORD_DISPLAY
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = burma14()
name = 'burma14';
bestKnownSol = 3323;
m = 14;
data = [...
    1  16.47       96.10
    2  16.47       94.44
    3  20.09       92.54
    4  22.39       93.37
    5  25.23       97.24
    6  22.00       96.05
    7  20.47       97.02
    8  17.20       96.29
    9  16.30       97.38
    10  14.05       98.12
    11  16.53       97.38
    12  21.52       95.59
    13  19.41       97.13
    14  20.09       94.55];

% Convert data to geographical latitude and longitude
lat = zeros(size(data,1),1);
long = zeros(size(data,1),1);
for i=1:size(data,1)
    deg = fix(data(i,2));
    min = data(i,2)-deg;
    lat(i) = pi*(deg+5*min/3)/180;
    deg = fix(data(i,3));
    min = data(i,3)-deg;
    long(i) = pi*(deg+5*min/3)/180;
end

% Generate cost (distant) matrix C
radius = 6378.388; % Earth radius in kilometers
C=NaN*ones(m,m);
for i=1:m
    for j=(i+1):m
        q1 = cos(long(i)-long(j));
        q2 = cos(lat(i)-lat(j));
        q3 = cos(lat(i)+lat(j));
        dij = fix( (radius * acos( 0.5*((1+q1)*q2-(1-q1)*q3) ) ) + 1 );
        C(i,j)=dij;
        C(j,i)=dij;
    end
end

%NAME: ch130
%TYPE: TSP
%COMMENT: 130 city problem (Churritz)
%DIMENSION: 130
%EDGE_WEIGHT_TYPE: EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = ch130()
name = 'ch130';
bestKnownSol = 6110;
m = 130;
xy = [...
    1 334.5909245845 161.7809319139
    2 397.6446634067 262.8165330708
    3 503.8741827107 172.8741151168
    4 444.0479403502 384.6491809647
    5 311.6137146746 2.0091699828
    6 662.8551011379 549.2301263653
    7 40.0979030612 187.2375430791
    8 526.8941409181 215.7079092185
    9 209.1887938487 691.0262291948
    10 683.2674131973 414.2096286906
    11 280.7494438748 5.9206392047
    12 252.7493090080 535.7430385019
    13 698.7850451923 348.4413729766
    14 678.7574678104 410.7256424438
    15 220.0041131179 409.1225812873
    16 355.1528556851 76.3912076444
    17 296.9724227786 313.1312792361
    18 504.5154071733 240.8866564499
    19 224.1079496785 358.4872228907
    20 470.6801296968 309.6259188406
    21 554.2530513223 279.4242466521
    22 567.6332684419 352.7162027273
    23 599.0532671093 361.0948690386
    24 240.5232959211 430.6036007844
    25 32.0825972787 345.8551009775
    26 91.0538736891 148.7213270256
    27 248.2179894723 343.9528017384
    28 488.8909044347 3.6122311393
    29 206.0467939820 437.7639406167
    30 575.8409415632 141.9670960195
    31 282.6089948164 329.4183805862
    32 27.6581484868 424.7684581747
    33 568.5737309870 287.0975660546
    34 269.4638933331 295.9464636385
    35 417.8004856811 341.2596589955
    36 32.1680938737 448.8998721172
    37 561.4775136009 357.3543930067
    38 342.9482167470 492.3321423839
    39 399.6752075383 156.8435035519
    40 571.7371050025 375.7575350833
    41 370.7559842751 151.9060751898
    42 509.7093253204 435.7975189314
    43 177.0206999750 295.6044772584
    44 526.1674198605 409.4859418161
    45 316.5725171854 65.6400108214
    46 469.2908100279 281.9891445025
    47 572.7630641427 373.3208821255
    48 29.5176994283 330.0382309000
    49 454.0082936692 537.2178547659
    50 416.1546762271 227.6133100741
    51 535.2514330806 471.0648643744
    52 265.4455533675 684.9987192464
    53 478.0542110167 509.6452028741
    54 370.4781203413 332.5390063041
    55 598.3479202004 446.8693279856
    56 201.1521139175 649.0260268945
    57 193.6925360026 680.2322840744
    58 448.5792598859 532.7934059740
    59 603.2853485624 134.4006473609
    60 543.0102490781 481.5168231148
    61 214.5750793346 43.6460117543
    62 426.3501451825 61.7285415996
    63 89.0447037063 277.1158385868
    64 84.4920100219 31.8474816424
    65 220.0468614154 623.0778103080
    66 688.4613313444 0.4702312726
    67 687.2857531630 373.5346236130
    68 75.4934933967 312.9175377486
    69 63.4170993511 23.7039309674
    70 97.9363495877 211.0910930878
    71 399.5255884970 170.8221968365
    72 456.3167017346 597.1937161677
    73 319.8855102422 626.8396604886
    74 295.9250894897 664.6291554845
    75 288.4868857235 667.7284070537
    76 268.3951858954 52.9010181645
    77 140.4709056068 513.5566720960
    78 689.8079027159 167.5947003748
    79 280.5784506848 458.7533546925
    80 453.3884433554 282.9082328989
    81 213.5704943432 525.8681817779
    82 133.6953004520 677.1757808026
    83 521.1658690522 132.8617086506
    84 30.2657946347 450.0754502986
    85 657.0199585283 39.7772908299
    86 6.9252241961 23.8749241575
    87 252.4286967767 535.1659364856
    88 42.8551682504 63.8232081774
    89 145.8999393902 399.5255884970
    90 638.4885715591 62.6262558472
    91 489.2756391122 665.3131282446
    92 361.2231139311 564.2347787901
    93 519.9475425732 347.9711417040
    94 129.3349741063 435.6692740389
    95 259.7172815016 454.6495181318
    96 676.3421890013 371.0979706551
    97 84.5133841706 183.3260738572
    98 77.7164048671 354.3833863300
    99 335.9802442534 660.6321896676
    100 264.3554717810 377.5743377274
    101 51.6826916855 676.0429509187
    102 692.1376849300 543.8010925819
    103 169.2191356800 547.8194325476
    104 194.0131482339 263.4791316822
    105 415.1928395332 78.9133571973
    106 415.0432204919 479.0801701569
    107 169.8389859939 245.6103433244
    108 525.0987124228 213.5063718969
    109 238.6851191283 33.4932910965
    110 116.2112467718 363.5742702940
    111 16.9283258126 656.5711014044
    112 434.3440768162 92.6996831431
    113 40.5253860363 424.6829615797
    114 530.4849979086 183.8390534273
    115 484.3595848990 49.2460387276
    116 263.6501248722 426.5852608187
    117 450.2891917862 126.3853415784
    118 441.7822805823 299.7724362653
    119 24.2169105375 500.3474481664
    120 503.7886861157 514.6895019799
    121 635.5389390312 200.9811207275
    122 614.5922732529 418.8691931188
    123 21.7161351334 660.9741760476
    124 143.8266469611 92.6996831431
    125 637.7191022040 54.2048412384
    126 566.5645610042 199.9551615873
    127 196.6849168280 221.8209157619
    128 384.9270448985 87.4630166986
    129 178.1107815614 104.6905805938
    130 403.2874386776 205.8971749407];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction


%NAME : eil51
%COMMENT : 51-city problem (Christofides/Eilon)
%TYPE : TSP
%DIMENSION : 51
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = eil51()
name = 'eil51';
bestKnownSol = 426;
m = 51;
xy = [...
    1 37 52
    2 49 49
    3 52 64
    4 20 26
    5 40 30
    6 21 47
    7 17 63
    8 31 62
    9 52 33
    10 51 21
    11 42 41
    12 31 32
    13 5 25
    14 12 42
    15 36 16
    16 52 41
    17 27 23
    18 17 33
    19 13 13
    20 57 58
    21 62 42
    22 42 57
    23 16 57
    24 8 52
    25 7 38
    26 27 68
    27 30 48
    28 43 67
    29 58 48
    30 58 27
    31 37 69
    32 38 46
    33 46 10
    34 61 33
    35 62 63
    36 63 69
    37 32 22
    38 45 35
    39 59 15
    40 5 6
    41 10 17
    42 21 10
    43 5 64
    44 30 15
    45 39 10
    46 32 39
    47 25 32
    48 25 55
    49 48 28
    50 56 37
    51 30 40];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME : eil76
%COMMENT : 76-city problem (Christofides/Eilon)
%TYPE : TSP
%DIMENSION : 76
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = eil76()
name = 'eil76';
bestKnownSol = 538;
m = 76;
xy = [...
    1 22 22
    2 36 26
    3 21 45
    4 45 35
    5 55 20
    6 33 34
    7 50 50
    8 55 45
    9 26 59
    10 40 66
    11 55 65
    12 35 51
    13 62 35
    14 62 57
    15 62 24
    16 21 36
    17 33 44
    18 9 56
    19 62 48
    20 66 14
    21 44 13
    22 26 13
    23 11 28
    24 7 43
    25 17 64
    26 41 46
    27 55 34
    28 35 16
    29 52 26
    30 43 26
    31 31 76
    32 22 53
    33 26 29
    34 50 40
    35 55 50
    36 54 10
    37 60 15
    38 47 66
    39 30 60
    40 30 50
    41 12 17
    42 15 14
    43 16 19
    44 21 48
    45 50 30
    46 51 42
    47 50 15
    48 48 21
    49 12 38
    50 15 56
    51 29 39
    52 54 38
    53 55 57
    54 67 41
    55 10 70
    56 6 25
    57 65 27
    58 40 60
    59 70 64
    60 64 4
    61 36 6
    62 30 20
    63 20 30
    64 15 5
    65 50 70
    66 57 72
    67 45 42
    68 38 33
    69 50 4
    70 66 8
    71 59 5
    72 35 60
    73 27 24
    74 40 20
    75 40 37
    76 40 40];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME: gr137
%TYPE: TSP
%COMMENT: America-Subproblem of 666-city TSP (Groetschel)
%DIMENSION: 137
%EDGE_WEIGHT_TYPE: GEO
%DISPLAY_DATA_TYPE: COORD_DISPLAY
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = gr137()
name = 'gr137';
bestKnownSol = 69853;
m = 137;
data = [...
    1 71.17 -156.47
    2 64.51 -147.43
    3 61.13 -149.53
    4 58.20 -134.27
    5 49.16 -123.07
    6 53.33 -113.28
    7 51.03 -114.05
    8 50.25 -104.39
    9 52.07 -106.38
    10 49.53 -97.09
    11 58.46 -94.10
    12 43.39 -79.23
    13 45.25 -75.42
    14 45.31 -73.34
    15 46.49 -71.14
    16 44.39 -63.36
    17 47.34 -52.43
    18 47.36 -122.20
    19 47.40 -117.23
    20 38.35 -121.30
    21 37.48 -122.24
    22 34.03 -118.15
    23 32.43 -117.09
    24 40.46 -111.53
    25 33.27 -112.05
    26 39.43 -105.01
    27 35.05 -106.40
    28 31.45 -106.29
    29 46.47 -92.06
    30 44.59 -93.13
    31 41.16 -95.57
    32 39.07 -94.39
    33 35.28 -97.32
    34 32.47 -96.48
    35 29.46 -95.22
    36 43.02 -87.55
    37 41.53 -87.38
    38 38.39 -90.25
    39 35.08 -90.03
    40 29.58 -90.07
    41 42.20 -83.03
    42 40.26 -80.00
    43 39.06 -84.31
    44 33.45 -84.23
    45 42.21 -71.04
    46 40.43 -74.01
    47 39.57 -75.07
    48 38.54 -77.01
    49 30.20 -81.40
    50 25.46 -80.12
    51 25.05 -77.21
    52 28.38 -106.05
    53 25.33 -103.26
    54 25.40 -100.19
    55 22.13 -97.51
    56 22.09 -100.59
    57 20.40 -103.20
    58 19.24 -99.09
    59 19.03 -98.12
    60 19.20 -96.40
    61 16.51 -99.55
    62 17.03 -96.43
    63 17.59 -92.55
    64 20.58 -89.37
    65 17.30 -88.12
    66 14.38 -90.31
    67 13.42 -89.12
    68 14.06 -87.13
    69 12.09 -86.17
    70 9.56 -84.05
    71 8.58 -79.32
    72 23.08 -82.22
    73 22.24 -79.58
    74 20.01 -75.49
    75 18.00 -76.48
    76 18.32 -72.20
    77 18.28 -69.54
    78 18.28 -66.07
    79 14.36 -61.05
    80 13.06 -59.37
    81 10.39 -61.31
    82 12.06 -68.56
    83 4.56 -52.20
    84 5.50 -55.10
    85 6.48 -58.10
    86 10.30 -66.56
    87 10.40 -71.37
    88 10.59 -74.48
    89 6.15 -75.35
    90 4.36 -74.05
    91 3.27 -76.31
    92 -0.56 -91.01
    93 -0.13 -78.30
    94 -1.40 -78.38
    95 -2.10 -79.50
    96 -3.46 -73.15
    97 -8.07 -79.02
    98 -12.03 -77.03
    99 -13.31 -71.59
    100 -16.24 -71.33
    101 -16.30 -68.09
    102 -17.48 -63.10
    103 -19.35 -65.45
    104 -23.39 -70.24
    105 -33.27 -70.40
    106 -36.50 -73.03
    107 -53.09 -70.55
    108 -51.42 -57.51
    109 -38.43 -62.17
    110 -38.00 -57.33
    111 -34.50 -56.12
    112 -34.36 -58.27
    113 -32.57 -60.40
    114 -31.24 -64.11
    115 -32.53 -68.49
    116 -26.49 -65.13
    117 -25.16 -57.40
    118 -30.04 -51.11
    119 -27.35 -48.34
    120 -25.25 -49.15
    121 -23.32 -46.37
    122 -22.54 -43.14
    123 -20.23 -43.30
    124 -19.55 -43.56
    125 -20.27 -54.37
    126 -15.35 -56.05
    127 -16.40 -49.16
    128 -15.47 -47.55
    129 -12.59 -38.31
    130 -8.03 -34.54
    131 -5.47 -35.13
    132 -3.43 -38.30
    133 -5.05 -42.49
    134 -2.31 -44.16
    135 -1.27 -48.29
    136 -3.08 -60.01
    137 -8.46 -63.54];
% Convert data to geographical latitude and longitude
lat = zeros(size(data,1),1);
long = zeros(size(data,1),1);
for i=1:size(data,1)
    deg = fix(data(i,2));
    min = data(i,2)-deg;
    lat(i) = pi*(deg+5*min/3)/180;
    deg = fix(data(i,3));
    min = data(i,3)-deg;
    long(i) = pi*(deg+5*min/3)/180;
end

% Generate cost (distant) matrix C
radius = 6378.388; % Earth radius in kilometers
C=NaN*ones(m,m);
for i=1:m
    for j=(i+1):m
        q1 = cos(long(i)-long(j));
        q2 = cos(lat(i)-lat(j));
        q3 = cos(lat(i)+lat(j));
        dij = fix( (radius * acos( 0.5*((1+q1)*q2-(1-q1)*q3) ) ) + 1 );
        C(i,j)=dij;
        C(j,i)=dij;
    end
end

%NAME: gr202
%TYPE: TSP
%COMMENT: Europe-Subproblem of 666-city TSP (Groetschel)
%DIMENSION: 202
%EDGE_WEIGHT_TYPE: GEO
%DISPLAY_DATA_TYPE: COORD_DISPLAY
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = gr202()
name = 'gr202';
bestKnownSol = 40160;
m = 202;
data = [...
    1 37.44 -25.40
    2 38.43 -9.08
    3 41.11 -8.36
    4 37.23 -5.59
    5 36.32 -6.18
    6 36.43 -4.25
    7 37.13 -3.41
    8 37.53 -4.46
    9 38.21 -0.29
    10 39.28 -0.22
    11 41.23 2.11
    12 41.38 -0.53
    13 40.24 -3.41
    14 41.39 -4.43
    15 43.15 -2.58
    16 43.22 -8.23
    17 38.54 1.26
    18 39.34 2.39
    19 42.30 1.31
    20 44.50 -0.34
    21 43.36 1.26
    22 43.18 5.24
    23 43.42 7.15
    24 43.42 7.23
    25 42.42 9.27
    26 45.50 1.16
    27 45.26 4.24
    28 45.45 4.51
    29 45.10 5.43
    30 48.24 -4.29
    31 48.05 -1.41
    32 47.13 -1.33
    33 47.23 0.41
    34 49.30 0.08
    35 48.52 2.20
    36 49.15 4.02
    37 47.19 5.01
    38 48.41 6.12
    39 48.35 7.45
    40 49.36 6.09
    41 50.38 5.34
    42 50.50 4.20
    43 50.38 3.04
    44 51.03 3.43
    45 51.13 4.25
    46 51.26 5.28
    47 51.55 4.28
    48 52.22 4.54
    49 52.05 5.08
    50 53.13 6.33
    51 50.23 -4.10
    52 50.43 -1.54
    53 50.50 -0.08
    54 51.29 -3.13
    55 51.27 -2.35
    56 51.30 -0.10
    57 52.30 -1.50
    58 53.25 -2.55
    59 53.30 -2.15
    60 53.23 -1.30
    61 53.50 -1.35
    62 54.59 -1.35
    63 55.57 -3.13
    64 55.53 -4.15
    65 56.28 -3.00
    66 57.10 -2.04
    67 60.09 -1.09
    68 62.01 -6.46
    69 51.54 -8.28
    70 52.40 -8.38
    71 53.20 -6.15
    72 54.35 -5.55
    73 55.00 -7.19
    74 64.09 -21.51
    75 64.11 -51.44
    76 76.34 -68.47
    77 70.40 23.42
    78 68.26 17.25
    79 65.01 25.28
    80 61.30 23.45
    81 60.27 22.17
    82 60.10 24.58
    83 63.25 10.25
    84 60.23 5.20
    85 58.58 5.45
    86 59.55 10.45
    87 57.43 11.58
    88 55.36 13.00
    89 58.25 15.37
    90 59.20 18.03
    91 57.38 18.18
    92 56.09 10.13
    93 55.24 10.23
    94 55.40 12.35
    95 53.04 8.49
    96 53.33 9.59
    97 54.20 10.08
    98 54.05 12.07
    99 51.57 7.37
    100 52.24 9.44
    101 52.07 11.38
    102 52.31 13.24
    103 50.47 6.05
    104 50.44 7.05
    105 50.56 6.59
    106 51.12 6.47
    107 51.17 7.17
    108 51.28 7.01
    109 51.28 7.13
    110 51.32 7.13
    111 51.31 7.28
    112 51.19 9.29
    113 50.58 11.01
    114 51.29 11.58
    115 51.19 12.20
    116 50.50 12.55
    117 51.03 13.44
    118 49.14 6.59
    119 50.07 8.40
    120 49.25 8.43
    121 49.48 9.56
    122 49.27 11.04
    123 49.03 8.24
    124 48.46 9.11
    125 49.01 12.06
    126 48.08 11.34
    127 46.12 6.09
    128 46.31 6.38
    129 46.57 7.26
    130 47.33 7.35
    131 47.23 8.32
    132 47.16 11.24
    133 47.48 13.02
    134 48.18 14.18
    135 48.13 16.20
    136 47.05 15.27
    137 45.03 7.40
    138 45.28 9.12
    139 45.27 11.00
    140 45.27 12.21
    141 45.40 13.46
    142 44.25 8.57
    143 44.29 11.20
    144 43.46 11.15
    145 43.55 12.28
    146 39.20 9.00
    147 41.54 12.29
    148 40.51 14.17
    149 41.27 15.34
    150 41.07 16.52
    151 40.28 17.15
    152 38.11 15.33
    153 37.30 15.06
    154 38.07 13.21
    155 35.54 14.31
    156 53.24 14.32
    157 54.23 18.40
    158 53.08 18.00
    159 52.25 16.55
    160 51.46 19.30
    161 52.15 21.00
    162 53.09 23.09
    163 51.06 17.00
    164 50.16 19.00
    165 50.03 19.58
    166 51.15 22.35
    167 49.45 13.23
    168 50.05 14.26
    169 49.50 18.17
    170 49.12 16.37
    171 48.09 17.07
    172 48.43 21.15
    173 47.30 19.05
    174 47.32 21.38
    175 46.05 18.13
    176 46.15 20.09
    177 45.45 21.13
    178 46.47 23.36
    179 47.10 27.35
    180 45.48 24.09
    181 45.39 25.37
    182 44.26 26.06
    183 44.11 28.39
    184 46.03 14.31
    185 45.20 14.27
    186 45.48 15.58
    187 43.31 16.27
    188 43.52 18.25
    189 44.50 20.30
    190 42.38 18.07
    191 41.59 21.26
    192 41.20 19.50
    193 42.41 23.19
    194 42.09 24.45
    195 43.13 27.55
    196 42.30 27.28
    197 39.36 19.56
    198 40.38 22.56
    199 38.15 21.44
    200 37.58 23.43
    201 35.20 25.09
    202 35.10 33.22];

% Convert data to geographical latitude and longitude
lat = zeros(size(data,1),1);
long = zeros(size(data,1),1);
for i=1:size(data,1)
    deg = fix(data(i,2));
    min = data(i,2)-deg;
    lat(i) = pi*(deg+5*min/3)/180;
    deg = fix(data(i,3));
    min = data(i,3)-deg;
    long(i) = pi*(deg+5*min/3)/180;
end

% Generate cost (distant) matrix C
radius = 6378.388; % Earth radius in kilometers
C=NaN*ones(m,m);
for i=1:m
    for j=(i+1):m
        q1 = cos(long(i)-long(j));
        q2 = cos(lat(i)-lat(j));
        q3 = cos(lat(i)+lat(j));
        dij = fix( (radius * acos( 0.5*((1+q1)*q2-(1-q1)*q3) ) ) + 1 );
        C(i,j)=dij;
        C(j,i)=dij;
    end
end

%NAME: gr96
%TYPE: TSP
%COMMENT: Africa-Subproblem of 666-city TSP (Groetschel)
%DIMENSION: 96
%EDGE_WEIGHT_TYPE: GEO
%DISPLAY_DATA_TYPE: COORD_DISPLAY
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = gr96()
name = 'gr96';
bestKnownSol = 55209;
m = 96;
data = [...
    1 14.55 -23.31
    2 28.06 -15.24
    3 32.38 -16.54
    4 31.38 -8.00
    5 33.39 -7.35
    6 34.02 -6.51
    7 34.05 -4.57
    8 35.48 -5.45
    9 35.43 -0.43
    10 36.47 3.03
    11 22.56 5.30
    12 36.22 6.37
    13 36.48 10.11
    14 34.44 10.46
    15 32.54 13.11
    16 32.07 20.04
    17 31.12 29.54
    18 31.16 32.18
    19 29.58 32.33
    20 30.03 31.15
    21 24.05 32.53
    22 19.37 37.14
    23 15.36 32.32
    24 13.11 30.13
    25 13.38 25.21
    26 15.20 38.53
    27 9.00 38.50
    28 11.36 43.09
    29 18.06 -15.57
    30 14.40 -17.26
    31 13.28 -16.39
    32 11.51 -15.35
    33 16.46 -3.01
    34 12.39 -8.00
    35 10.23 -9.18
    36 9.31 -13.43
    37 8.30 -13.15
    38 6.18 -10.47
    39 5.19 -4.02
    40 6.41 -1.35
    41 5.33 -0.13
    42 6.08 1.13
    43 6.29 2.37
    44 12.22 -1.31
    45 13.31 2.07
    46 12.00 8.30
    47 11.51 13.10
    48 12.07 15.03
    49 6.27 3.24
    50 6.27 7.27
    51 0.20 6.44
    52 3.45 8.47
    53 3.52 11.31
    54 4.22 18.35
    55 0.23 9.27
    56 -4.16 15.17
    57 -4.18 15.18
    58 0.04 18.16
    59 -5.54 22.25
    60 0.30 25.12
    61 -3.23 29.22
    62 -1.57 30.04
    63 0.19 32.25
    64 -1.17 36.49
    65 2.01 45.20
    66 -4.03 39.40
    67 -6.10 39.11
    68 -6.48 39.17
    69 -8.48 13.14
    70 -12.44 15.47
    71 -11.40 27.28
    72 -12.49 28.13
    73 -15.25 28.17
    74 -20.09 28.36
    75 -17.50 31.03
    76 -15.47 35.00
    77 -19.49 34.52
    78 -25.58 32.35
    79 -15.57 -5.42
    80 -37.15 -12.30
    81 -22.59 14.31
    82 -22.34 17.06
    83 -26.38 15.10
    84 -24.45 25.55
    85 -25.45 28.10
    86 -26.15 28.00
    87 -29.12 26.07
    88 -29.55 30.56
    89 -33.00 27.55
    90 -33.58 25.40
    91 -33.55 18.22
    92 -23.21 43.40
    93 -18.55 47.31
    94 -12.16 49.17
    95 -20.10 57.30
    96 -4.38 55.27];

% Convert data to geographical latitude and longitude
lat = zeros(size(data,1),1);
long = zeros(size(data,1),1);
for i=1:size(data,1)
    deg = fix(data(i,2));
    min = data(i,2)-deg;
    lat(i) = pi*(deg+5*min/3)/180;
    deg = fix(data(i,3));
    min = data(i,3)-deg;
    long(i) = pi*(deg+5*min/3)/180;
end

% Generate cost (distant) matrix C
radius = 6378.388; % Earth radius in kilometers
C=NaN*ones(m,m);
for i=1:m
    for j=(i+1):m
        q1 = cos(long(i)-long(j));
        q2 = cos(lat(i)-lat(j));
        q3 = cos(lat(i)+lat(j));
        dij = fix( (radius * acos( 0.5*((1+q1)*q2-(1-q1)*q3) ) ) + 1 );
        C(i,j)=dij;
        C(j,i)=dij;
    end
end

%NAME: kroA100
%TYPE: TSP
%COMMENT: 100-city problem A (Krolak/Felts/Nelson)
%DIMENSION: 100
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = kroA100()
name = 'kroA100';
bestKnownSol = 21282;
m = 100;
xy = [...
    1 1380 939
    2 2848 96
    3 3510 1671
    4 457 334
    5 3888 666
    6 984 965
    7 2721 1482
    8 1286 525
    9 2716 1432
    10 738 1325
    11 1251 1832
    12 2728 1698
    13 3815 169
    14 3683 1533
    15 1247 1945
    16 123 862
    17 1234 1946
    18 252 1240
    19 611 673
    20 2576 1676
    21 928 1700
    22 53 857
    23 1807 1711
    24 274 1420
    25 2574 946
    26 178 24
    27 2678 1825
    28 1795 962
    29 3384 1498
    30 3520 1079
    31 1256 61
    32 1424 1728
    33 3913 192
    34 3085 1528
    35 2573 1969
    36 463 1670
    37 3875 598
    38 298 1513
    39 3479 821
    40 2542 236
    41 3955 1743
    42 1323 280
    43 3447 1830
    44 2936 337
    45 1621 1830
    46 3373 1646
    47 1393 1368
    48 3874 1318
    49 938 955
    50 3022 474
    51 2482 1183
    52 3854 923
    53 376 825
    54 2519 135
    55 2945 1622
    56 953 268
    57 2628 1479
    58 2097 981
    59 890 1846
    60 2139 1806
    61 2421 1007
    62 2290 1810
    63 1115 1052
    64 2588 302
    65 327 265
    66 241 341
    67 1917 687
    68 2991 792
    69 2573 599
    70 19 674
    71 3911 1673
    72 872 1559
    73 2863 558
    74 929 1766
    75 839 620
    76 3893 102
    77 2178 1619
    78 3822 899
    79 378 1048
    80 1178 100
    81 2599 901
    82 3416 143
    83 2961 1605
    84 611 1384
    85 3113 885
    86 2597 1830
    87 2586 1286
    88 161 906
    89 1429 134
    90 742 1025
    91 1625 1651
    92 1187 706
    93 1787 1009
    94 22 987
    95 3640 43
    96 3756 882
    97 776 392
    98 1724 1642
    99 198 1810
    100 3950 1558];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME: kroA150
%TYPE: TSP
%COMMENT: 150-city problem A (Krolak/Felts/Nelson)
%DIMENSION: 150
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = kroA150()
name = 'kroA150';
bestKnownSol = 26524;
m = 150;
xy = [...
    1 1380 939
    2 2848 96
    3 3510 1671
    4 457 334
    5 3888 666
    6 984 965
    7 2721 1482
    8 1286 525
    9 2716 1432
    10 738 1325
    11 1251 1832
    12 2728 1698
    13 3815 169
    14 3683 1533
    15 1247 1945
    16 123 862
    17 1234 1946
    18 252 1240
    19 611 673
    20 2576 1676
    21 928 1700
    22 53 857
    23 1807 1711
    24 274 1420
    25 2574 946
    26 178 24
    27 2678 1825
    28 1795 962
    29 3384 1498
    30 3520 1079
    31 1256 61
    32 1424 1728
    33 3913 192
    34 3085 1528
    35 2573 1969
    36 463 1670
    37 3875 598
    38 298 1513
    39 3479 821
    40 2542 236
    41 3955 1743
    42 1323 280
    43 3447 1830
    44 2936 337
    45 1621 1830
    46 3373 1646
    47 1393 1368
    48 3874 1318
    49 938 955
    50 3022 474
    51 2482 1183
    52 3854 923
    53 376 825
    54 2519 135
    55 2945 1622
    56 953 268
    57 2628 1479
    58 2097 981
    59 890 1846
    60 2139 1806
    61 2421 1007
    62 2290 1810
    63 1115 1052
    64 2588 302
    65 327 265
    66 241 341
    67 1917 687
    68 2991 792
    69 2573 599
    70 19 674
    71 3911 1673
    72 872 1559
    73 2863 558
    74 929 1766
    75 839 620
    76 3893 102
    77 2178 1619
    78 3822 899
    79 378 1048
    80 1178 100
    81 2599 901
    82 3416 143
    83 2961 1605
    84 611 1384
    85 3113 885
    86 2597 1830
    87 2586 1286
    88 161 906
    89 1429 134
    90 742 1025
    91 1625 1651
    92 1187 706
    93 1787 1009
    94 22 987
    95 3640 43
    96 3756 882
    97 776 392
    98 1724 1642
    99 198 1810
    100 3950 1558
    101 3477 949
    102 91 1732
    103 3972 329
    104 198 1632
    105 1806 733
    106 538 1023
    107 3430 1088
    108 2186 766
    109 1513 1646
    110 2143 1611
    111 53 1657
    112 3404 1307
    113 1034 1344
    114 2823 376
    115 3104 1931
    116 3232 324
    117 2790 1457
    118 374 9
    119 741 146
    120 3083 1938
    121 3502 1067
    122 1280 237
    123 3326 1846
    124 217 38
    125 2503 1172
    126 3527 41
    127 739 1850
    128 3548 1999
    129 48 154
    130 1419 872
    131 1689 1223
    132 3468 1404
    133 1628 253
    134 382 872
    135 3029 1242
    136 3646 1758
    137 285 1029
    138 1782 93
    139 1067 371
    140 2849 1214
    141 920 1835
    142 1741 712
    143 876 220
    144 2753 283
    145 2609 1286
    146 3941 258
    147 3613 523
    148 1754 559
    149 2916 1724
    150 2445 1820];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME: kroB200
%TYPE: TSP
%COMMENT: 200-city problem B (Krolak/Felts/Nelson)
%DIMENSION: 200
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = kroB200()
name = 'kroB200';
bestKnownSol = 29437;
m = 200;
xy = [...
    1 3140 1401
    2 556 1056
    3 3675 1522
    4 1182 1853
    5 3595 111
    6 962 1895
    7 2030 1186
    8 3507 1851
    9 2642 1269
    10 3438 901
    11 3858 1472
    12 2937 1568
    13 376 1018
    14 839 1355
    15 706 1925
    16 749 920
    17 298 615
    18 694 552
    19 387 190
    20 2801 695
    21 3133 1143
    22 1517 266
    23 1538 224
    24 844 520
    25 2639 1239
    26 3123 217
    27 2489 1520
    28 3834 1827
    29 3417 1808
    30 2938 543
    31 71 1323
    32 3245 1828
    33 731 1741
    34 2312 1270
    35 2426 1851
    36 380 478
    37 2310 635
    38 2830 775
    39 3829 513
    40 3684 445
    41 171 514
    42 627 1261
    43 1490 1123
    44 61 81
    45 422 542
    46 2698 1221
    47 2372 127
    48 177 1390
    49 3084 748
    50 1213 910
    51 3 1817
    52 1782 995
    53 3896 742
    54 1829 812
    55 1286 550
    56 3017 108
    57 2132 1432
    58 2000 1110
    59 3317 1966
    60 1729 1498
    61 2408 1747
    62 3292 152
    63 193 1210
    64 782 1462
    65 2503 352
    66 1697 1924
    67 3821 147
    68 3370 791
    69 3162 367
    70 3938 516
    71 2741 1583
    72 2330 741
    73 3918 1088
    74 1794 1589
    75 2929 485
    76 3453 1998
    77 896 705
    78 399 850
    79 2614 195
    80 2800 653
    81 2630 20
    82 563 1513
    83 1090 1652
    84 2009 1163
    85 3876 1165
    86 3084 774
    87 1526 1612
    88 1612 328
    89 1423 1322
    90 3058 1276
    91 3782 1865
    92 347 252
    93 3904 1444
    94 2191 1579
    95 3220 1454
    96 468 319
    97 3611 1968
    98 3114 1629
    99 3515 1892
    100 3060 155
    101 2995 264
    102 202 233
    103 981 848
    104 1346 408
    105 781 670
    106 1009 1001
    107 2927 1777
    108 2982 949
    109 555 1121
    110 464 1302
    111 3452 637
    112 571 1982
    113 2656 128
    114 1623 1723
    115 2067 694
    116 1725 927
    117 3600 459
    118 1109 1196
    119 366 339
    120 778 1282
    121 386 1616
    122 3918 1217
    123 3332 1049
    124 2597 349
    125 811 1295
    126 241 1069
    127 2658 360
    128 394 1944
    129 3786 1862
    130 264 36
    131 2050 1833
    132 3538 125
    133 1646 1817
    134 2993 624
    135 547 25
    136 3373 1902
    137 460 267
    138 3060 781
    139 1828 456
    140 1021 962
    141 2347 388
    142 3535 1112
    143 1529 581
    144 1203 385
    145 1787 1902
    146 2740 1101
    147 555 1753
    148 47 363
    149 3935 540
    150 3062 329
    151 387 199
    152 2901 920
    153 931 512
    154 1766 692
    155 401 980
    156 149 1629
    157 2214 1977
    158 3805 1619
    159 1179 969
    160 1017 333
    161 2834 1512
    162 634 294
    163 1819 814
    164 1393 859
    165 1768 1578
    166 3023 871
    167 3248 1906
    168 1632 1742
    169 2223 990
    170 3868 697
    171 1541 354
    172 2374 1944
    173 1962 389
    174 3007 1524
    175 3220 1945
    176 2356 1568
    177 1604 706
    178 2028 1736
    179 2581 121
    180 2221 1578
    181 2944 632
    182 1082 1561
    183 997 942
    184 2334 523
    185 1264 1090
    186 1699 1294
    187 235 1059
    188 2592 248
    189 3642 699
    190 3599 514
    191 1766 678
    192 240 619
    193 1272 246
    194 3503 301
    195 80 1533
    196 1677 1238
    197 3766 154
    198 3946 459
    199 1994 1852
    200 278 165];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME: lin105
%TYPE: TSP
%COMMENT: 105-city problem (Subproblem of lin318)
%DIMENSION: 105
%EDGE_WEIGHT_TYPE: EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = lin105()
name = 'lin105';
bestKnownSol = 14379;
m = 105;
xy = [...
    1 63 71
    2 94 71
    3 142 370
    4 173 1276
    5 205 1213
    6 213 69
    7 244 69
    8 276 630
    9 283 732
    10 362 69
    11 394 69
    12 449 370
    13 480 1276
    14 512 1213
    15 528 157
    16 583 630
    17 591 732
    18 638 654
    19 638 496
    20 638 314
    21 638 142
    22 669 142
    23 677 315
    24 677 496
    25 677 654
    26 709 654
    27 709 496
    28 709 315
    29 701 142
    30 764 220
    31 811 189
    32 843 173
    33 858 370
    34 890 1276
    35 921 1213
    36 992 630
    37 1000 732
    38 1197 1276
    39 1228 1213
    40 1276 205
    41 1299 630
    42 1307 732
    43 1362 654
    44 1362 496
    45 1362 291
    46 1425 654
    47 1425 496
    48 1425 291
    49 1417 173
    50 1488 291
    51 1488 496
    52 1488 654
    53 1551 654
    54 1551 496
    55 1551 291
    56 1614 291
    57 1614 496
    58 1614 654
    59 1732 189
    60 1811 1276
    61 1843 1213
    62 1913 630
    63 1921 732
    64 2087 370
    65 2118 1276
    66 2150 1213
    67 2189 205
    68 2220 189
    69 2220 630
    70 2228 732
    71 2244 142
    72 2276 315
    73 2276 496
    74 2276 654
    75 2315 654
    76 2315 496
    77 2315 315
    78 2331 142
    79 2346 315
    80 2346 496
    81 2346 654
    82 2362 142
    83 2402 157
    84 2402 220
    85 2480 142
    86 2496 370
    87 2528 1276
    88 2559 1213
    89 2630 630
    90 2638 732
    91 2756 69
    92 2787 69
    93 2803 370
    94 2835 1276
    95 2866 1213
    96 2906 69
    97 2937 69
    98 2937 630
    99 2945 732
    100 3016 1276
    101 3055 69
    102 3087 69
    103 606 220
    104 1165 370
    105 1780 3709];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME : pr107
%COMMENT : 107-city problem (Padberg/Rinaldi)
%TYPE : TSP
%DIMENSION : 107
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = pr107()
name = 'pr107';
bestKnownSol = 44303;
m = 107;
xy = [...
    1 8375 4700
    2 8775 4700
    3 8375 4900
    4 8175 4900
    5 8775 4900
    6 8575 4900
    7 8775 5400
    8 8375 5450
    9 8775 5600
    10 8575 5600
    11 8375 5650
    12 8175 5650
    13 8375 6200
    14 8775 6200
    15 8375 6400
    16 8175 6400
    17 8775 6400
    18 8575 6400
    19 8375 7000
    20 8775 7000
    21 8375 7200
    22 8175 7200
    23 8775 7200
    24 8575 7200
    25 8375 7800
    26 8775 7800
    27 8375 8000
    28 8175 8000
    29 8775 8000
    30 8575 8000
    31 8375 8700
    32 8775 8700
    33 8375 8900
    34 8175 8900
    35 8775 8900
    36 8575 8900
    37 8375 9600
    38 8775 9600
    39 8375 9800
    40 8175 9800
    41 8775 9800
    42 8575 9800
    43 8375 10500
    44 8775 10450
    45 8375 10700
    46 8175 10700
    47 8775 10650
    48 8575 10650
    49 8375 11300
    50 8775 11300
    51 8375 11500
    52 8175 11500
    53 8775 11500
    54 8575 11500
    55 15825 11500
    56 15825 10700
    57 15825 9800
    58 15825 8900
    59 15825 8000
    60 15825 7200
    61 15825 6400
    62 15825 5650
    63 15825 4900
    64 16025 4700
    65 16425 4700
    66 16025 4900
    67 16225 4900
    68 16425 4900
    69 16425 5400
    70 16025 5450
    71 16225 5600
    72 16425 5600
    73 16025 5650
    74 16025 6200
    75 16425 6200
    76 16025 6400
    77 16225 6400
    78 16425 6400
    79 16025 7000
    80 16425 7000
    81 16025 7200
    82 16225 7200
    83 16425 7200
    84 16025 7800
    85 16425 7800
    86 16025 8000
    87 16225 8000
    88 16425 8000
    89 16025 8700
    90 16425 8700
    91 16025 8900
    92 16225 8900
    93 16425 8900
    94 16025 9600
    95 16425 9600
    96 16025 9800
    97 16225 9800
    98 16425 9800
    99 16025 10500
    100 16425 10450
    101 16025 10700
    102 16225 10650
    103 16425 10650
    104 16025 11300
    105 16425 11300
    106 16025 11500
    107 16225 11500];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME : pr124
%COMMENT : 124-city problem (Padberg/Rinaldi)
%TYPE : TSP
%DIMENSION : 124
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = pr124()
name = 'pr124';
bestKnownSol = 59030;
m = 124;
xy = [...
    1 4475 8657
    2 4475 8969
    3 4475 9407
    4 4475 9719
    5 5450 10475
    6 5475 9750
    7 5475 8650
    8 4575 8425
    9 5425 3300
    10 5425 3000
    11 5425 2400
    12 5425 2100
    13 5425 1800
    14 6000 2375
    15 6375 2375
    16 6000 3375
    17 6375 3375
    18 6475 4675
    19 6475 4875
    20 6475 5275
    21 6475 5475
    22 6100 6675
    23 6350 6675
    24 6350 7275
    25 6100 7275
    26 6550 7625
    27 5775 8650
    28 6075 8650
    29 6375 8650
    30 6375 9750
    31 6075 9750
    32 5775 9750
    33 6975 9750
    34 6675 9750
    35 6675 8650
    36 6875 8650
    37 6850 7275
    38 6600 7275
    39 6600 6675
    40 6850 6675
    41 7100 5425
    42 7100 5275
    43 7100 5075
    44 7100 4875
    45 7100 4675
    46 6925 3300
    47 6925 3000
    48 6925 2700
    49 6925 2400
    50 6925 2100
    51 6925 1800
    52 7700 3725
    53 7850 3700
    54 7700 4725
    55 7750 7475
    56 8125 7525
    57 8500 7475
    58 8500 8225
    59 7600 9025
    60 8350 9025
    61 7975 9075
    62 8350 9775
    63 9375 11225
    64 9531 11225
    65 9475 10275
    66 9275 10050
    67 10375 9525
    68 9687 11225
    69 9843 11225
    70 9999 11225
    71 10155 11225
    72 10311 11225
    73 10467 11225
    74 10623 11225
    75 10779 11225
    76 10935 11225
    77 11091 11225
    78 11247 11225
    79 11403 11225
    80 11559 11225
    81 11175 9800
    82 11275 9475
    83 10650 9400
    84 11275 9175
    85 11125 5350
    86 11025 4750
    87 11000 4600
    88 11000 3600
    89 11650 3350
    90 11725 4825
    91 12500 5950
    92 11715 11225
    93 11871 11225
    94 12027 11225
    95 12183 11225
    96 12339 11225
    97 12495 11225
    98 12651 11225
    99 12807 11225
    100 12963 11225
    101 13325 6100
    102 13100 4625
    103 12825 3800
    104 12850 2425
    105 13585 1975
    106 13585 2131
    107 13585 2287
    108 13585 2443
    109 13585 2599
    110 13585 2755
    111 13585 2911
    112 13585 3067
    113 13585 3223
    114 13585 3379
    115 13585 9615
    116 13585 9771
    117 13585 9927
    118 13585 10083
    119 13585 10239
    120 13585 10395
    121 13585 10551
    122 13585 10707
    123 13585 10863
    124 13585 11019];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME : pr136
%COMMENT : 136-city problem (Padberg/Rinaldi)
%TYPE : TSP
%DIMENSION : 136
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = pr136()
name = 'pr136';
bestKnownSol = 96772;
m = 136;
xy = [...
    1 5300 1965
    2 7275 1965
    3 12450 1965
    4 14425 1965
    5 4118 2275
    6 4743 2275
    7 5935 2275
    8 6560 2275
    9 11268 2275
    10 11893 2275
    11 13085 2275
    12 13710 2275
    13 14425 2590
    14 12450 2590
    15 10250 2675
    16 7275 2590
    17 5300 2590
    18 3100 2675
    19 5300 2760
    20 7275 2760
    21 12450 2760
    22 14425 2760
    23 13710 3075
    24 13085 3075
    25 11893 3075
    26 11268 3075
    27 6560 3075
    28 5935 3075
    29 4743 3075
    30 4118 3075
    31 5300 3385
    32 7275 3385
    33 12450 3385
    34 14425 3385
    35 14425 4515
    36 12450 4515
    37 7275 4515
    38 5300 4515
    39 4118 4825
    40 4743 4825
    41 5935 4825
    42 6560 4825
    43 11268 4825
    44 11893 4825
    45 13085 4825
    46 13710 4825
    47 14425 5140
    48 12450 5140
    49 10250 5225
    50 7275 5140
    51 5300 5140
    52 3100 5225
    53 5300 5310
    54 7275 5310
    55 12450 5310
    56 14425 5310
    57 13710 5625
    58 13085 5625
    59 11893 5625
    60 11268 5625
    61 6560 5625
    62 5935 5625
    63 4743 5625
    64 4118 5625
    65 5300 5935
    66 7275 5935
    67 12450 5935
    68 14425 5935
    69 14425 7065
    70 12450 7065
    71 7275 7065
    72 5300 7065
    73 4118 7375
    74 4743 7375
    75 5935 7375
    76 6560 7375
    77 11268 7375
    78 11893 7375
    79 13085 7375
    80 13710 7375
    81 14425 7690
    82 12450 7690
    83 7275 7690
    84 5300 7690
    85 3100 7775
    86 5300 7860
    87 7275 7860
    88 10250 7775
    89 12450 7860
    90 14425 7860
    91 13710 8175
    92 13085 8175
    93 11893 8175
    94 11268 8175
    95 6560 8175
    96 5935 8175
    97 4743 8175
    98 4118 8175
    99 5300 8485
    100 7275 8485
    101 12450 8485
    102 14425 8485
    103 14425 9615
    104 12450 9615
    105 7275 9615
    106 5300 9615
    107 4118 9925
    108 4743 9925
    109 5935 9925
    110 6560 9925
    111 11268 9925
    112 11893 9925
    113 13085 9925
    114 13710 9925
    115 14425 10240
    116 12450 10240
    117 7275 10240
    118 5300 10240
    119 3100 10325
    120 5300 10410
    121 7275 10410
    122 10250 10325
    123 12450 10410
    124 14425 10410
    125 13710 10725
    126 13085 10725
    127 11893 10725
    128 11268 10725
    129 6560 10725
    130 5935 10725
    131 4743 10725
    132 4118 10725
    133 14425 11035
    134 12450 11035
    135 7275 11035
    136 5300 11035];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME : pr152
%COMMENT : 152-city problem (Padberg/Rinaldi)
%TYPE : TSP
%DIMENSION : 152
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = pr152()
name = 'pr152';
bestKnownSol = 73682;
m = 152;
xy = [...
    1 2100 1850
    2 2100 3000
    3 2100 4400
    4 2100 5550
    5 2100 6950
    6 2100 8100
    7 2100 9500
    8 2100 10650
    9 2348 11205
    10 2350 10050
    11 2348 8655
    12 2350 7500
    13 2348 6105
    14 2350 4950
    15 2348 3555
    16 2350 2400
    17 2625 11175
    18 2775 10995
    19 2625 10025
    20 2634 9748
    21 2607 9831
    22 2625 8625
    23 2775 8445
    24 2625 7475
    25 2607 7281
    26 2634 7198
    27 2625 6075
    28 2775 5895
    29 2625 4925
    30 2607 4731
    31 2634 4648
    32 2625 3525
    33 2775 3345
    34 2625 2375
    35 2634 2098
    36 2607 2181
    37 2825 3025
    38 2825 5575
    39 2825 8125
    40 2825 10675
    41 8349 10106
    42 8353 9397
    43 8349 7556
    44 8353 6847
    45 8349 5006
    46 8353 4297
    47 8349 2456
    48 8353 1747
    49 8474 1777
    50 8576 1803
    51 8575 2325
    52 8474 4327
    53 8576 4353
    54 8575 4875
    55 8474 6877
    56 8576 6903
    57 8575 7425
    58 8474 9427
    59 8576 9453
    60 8575 9975
    61 8625 9875
    62 8675 9675
    63 8675 9525
    64 8669 9450
    65 8625 7325
    66 8675 7125
    67 8675 6975
    68 8669 6900
    69 8625 4775
    70 8675 4575
    71 8675 4425
    72 8669 4350
    73 8625 2225
    74 8675 1875
    75 8675 2025
    76 8669 1800
    77 9250 1850
    78 9250 3000
    79 9250 4400
    80 9250 5550
    81 9250 6950
    82 9250 8100
    83 9250 9500
    84 9250 10650
    85 9498 11205
    86 9500 10050
    87 9498 8655
    88 9500 7500
    89 9498 6105
    90 9500 4950
    91 9498 3555
    92 9500 2400
    93 9784 2098
    94 9757 2181
    95 9775 2375
    96 9775 3525
    97 9784 4648
    98 9757 4731
    99 9775 4925
    100 9775 6075
    101 9784 7198
    102 9757 7281
    103 9775 7475
    104 9775 8625
    105 9784 9748
    106 9757 9831
    107 9775 10025
    108 9775 11175
    109 9925 10995
    110 9975 10675
    111 9925 8445
    112 9975 8125
    113 9925 5895
    114 9975 5575
    115 9925 3345
    116 9975 3025
    117 15499 10106
    118 15503 9397
    119 15499 7556
    120 15503 6847
    121 15499 5006
    122 15503 4297
    123 15499 2456
    124 15503 1747
    125 15624 1777
    126 15726 1803
    127 15775 2225
    128 15725 2325
    129 15624 4327
    130 15726 4353
    131 15775 4775
    132 15725 4875
    133 15624 6877
    134 15726 6903
    135 15775 7325
    136 15725 7425
    137 15624 9427
    138 15726 9453
    139 15775 9875
    140 15725 9975
    141 15825 9675
    142 15825 9525
    143 15819 9450
    144 15825 7125
    145 15825 6975
    146 15819 6900
    147 15825 4575
    148 15825 4425
    149 15819 4350
    150 15825 1875
    151 15825 2025
    152 15819 1800];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME : pr76
%COMMENT : 76-city problem (Padberg/Rinaldi)
%TYPE : TSP
%DIMENSION : 76
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = pr76()
name = 'pr76';
bestKnownSol = 108159;
m = 76;
xy = [...
    1 3600 2300
    2 3100 3300
    3 4700 5750
    4 5400 5750
    5 5608 7103
    6 4493 7102
    7 3600 6950
    8 3100 7250
    9 4700 8450
    10 5400 8450
    11 5610 10053
    12 4492 10052
    13 3600 10800
    14 3100 10950
    15 4700 11650
    16 5400 11650
    17 6650 10800
    18 7300 10950
    19 7300 7250
    20 6650 6950
    21 7300 3300
    22 6650 2300
    23 5400 1600
    24 8350 2300
    25 7850 3300
    26 9450 5750
    27 10150 5750
    28 10358 7103
    29 9243 7102
    30 8350 6950
    31 7850 7250
    32 9450 8450
    33 10150 8450
    34 10360 10053
    35 9242 10052
    36 8350 10800
    37 7850 10950
    38 9450 11650
    39 10150 11650
    40 11400 10800
    41 12050 10950
    42 12050 7250
    43 11400 6950
    44 12050 3300
    45 11400 2300
    46 10150 1600
    47 13100 2300
    48 12600 3300
    49 14200 5750
    50 14900 5750
    51 15108 7103
    52 13993 7102
    53 13100 6950
    54 12600 7250
    55 14200 8450
    56 14900 8450
    57 15110 10053
    58 13992 10052
    59 13100 10800
    60 12600 10950
    61 14200 11650
    62 14900 11650
    63 16150 10800
    64 16800 10950
    65 16800 7250
    66 16150 6950
    67 16800 3300
    68 16150 2300
    69 14900 1600
    70 19800 800
    71 19800 10000
    72 19800 11900
    73 19800 12200
    74 200 12200
    75 200 1100
    76 200 800];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME : rat195
%COMMENT : Rattled grid (Pulleyblank)
%TYPE : TSP
%DIMENSION : 195
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = rat195()
name = 'rat195';
bestKnownSol = 2323;
m = 195;
xy = [...
    1 3 12
    2 17 12
    3 23 9
    4 34 11
    5 47 11
    6 54 12
    7 66 16
    8 75 7
    9 86 6
    10 94 8
    11 107 9
    12 115 14
    13 123 15
    14 3 32
    15 15 32
    16 26 34
    17 33 34
    18 42 34
    19 53 25
    20 64 32
    21 74 32
    22 85 34
    23 95 28
    24 104 25
    25 113 31
    26 125 34
    27 3 48
    28 15 46
    29 26 50
    30 36 54
    31 48 50
    32 54 46
    33 64 54
    34 75 44
    35 88 49
    36 98 50
    37 103 54
    38 115 47
    39 127 49
    40 6 75
    41 15 75
    42 27 73
    43 36 73
    44 47 68
    45 54 72
    46 66 68
    47 74 67
    48 85 65
    49 94 74
    50 107 65
    51 117 65
    52 125 68
    53 6 84
    54 13 95
    55 25 94
    56 37 84
    57 47 87
    58 53 95
    59 63 86
    60 77 93
    61 83 89
    62 94 95
    63 103 92
    64 115 95
    65 123 93
    66 7 114
    67 15 111
    68 24 112
    69 36 108
    70 43 112
    71 56 105
    72 64 112
    73 73 112
    74 86 107
    75 98 108
    76 104 113
    77 117 115
    78 126 109
    79 6 127
    80 17 125
    81 27 134
    82 35 126
    83 44 131
    84 54 132
    85 63 124
    86 77 127
    87 82 134
    88 96 128
    89 103 126
    90 116 130
    91 126 134
    92 7 152
    93 16 147
    94 24 153
    95 35 151
    96 45 154
    97 55 146
    98 63 155
    99 75 151
    100 87 154
    101 93 156
    102 104 151
    103 117 153
    104 127 148
    105 3 164
    106 16 172
    107 25 165
    108 35 175
    109 44 169
    110 53 174
    111 64 168
    112 76 171
    113 87 173
    114 95 174
    115 106 168
    116 114 169
    117 125 169
    118 3 190
    119 16 188
    120 25 195
    121 37 186
    122 44 189
    123 54 194
    124 66 192
    125 77 192
    126 85 188
    127 93 185
    128 106 192
    129 113 193
    130 125 195
    131 5 207
    132 15 213
    133 24 209
    134 33 214
    135 43 206
    136 53 211
    137 64 213
    138 74 212
    139 84 212
    140 94 209
    141 104 215
    142 115 206
    143 127 209
    144 6 229
    145 13 227
    146 26 235
    147 34 225
    148 43 227
    149 55 225
    150 67 229
    151 75 234
    152 87 230
    153 95 235
    154 105 228
    155 117 225
    156 127 230
    157 6 249
    158 15 246
    159 26 255
    160 33 246
    161 47 248
    162 58 252
    163 65 248
    164 73 247
    165 87 249
    166 94 245
    167 104 256
    168 113 246
    169 125 253
    170 5 266
    171 16 274
    172 24 267
    173 37 266
    174 45 267
    175 54 266
    176 67 267
    177 74 265
    178 87 264
    179 95 271
    180 106 264
    181 116 271
    182 127 273
    183 7 287
    184 17 294
    185 23 287
    186 33 284
    187 43 288
    188 53 295
    189 67 288
    190 73 286
    191 87 293
    192 94 284
    193 104 291
    194 114 294
    195 127 290];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME : rat99
%COMMENT : Rattled grid (Pulleyblank)
%TYPE : TSP
%DIMENSION : 99
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = rat99()
name = 'rat99';
bestKnownSol = 1211;
m = 99;
xy = [...
    1  6  4
    2 15 15
    3 24 18
    4 33 12
    5 48 12
    6 57 14
    7 67 10
    8 77 10
    9 86 15
    10  6 21
    11 17 26
    12 23 25
    13 32 35
    14 43 23
    15 55 35
    16 65 36
    17 78 39
    18 87 35
    19  3 53
    20 12 44
    21 28 53
    22 33 49
    23 47 46
    24 55 52
    25 64 50
    26 71 57
    27 87 57
    28  4 72
    29 15 78
    30 22 70
    31 34 71
    32 42 79
    33 54 77
    34 66 79
    35 78 67
    36 87 73
    37  7 81
    38 17 95
    39 26 98
    40 32 97
    41 43 88
    42 57 89
    43 64 85
    44 78 83
    45 83 98
    46  5 109
    47 13 111
    48 25 102
    49 38 119
    50 46 107
    51 58 110
    52 67 110
    53 74 113
    54 88 110
    55  2 124
    56 17 134
    57 23 129
    58 36 131
    59 42 137
    60 53 123
    61 63 135
    62 72 134
    63 87 129
    64  2 146
    65 16 147
    66 25 153
    67 38 155
    68 42 158
    69 57 154
    70 66 151
    71 73 151
    72 86 149
    73  5 177
    74 13 162
    75 25 169
    76 35 177
    77 46 172
    78 54 166
    79 65 174
    80 73 161
    81 86 162
    82  2 195
    83 14 196
    84 28 189
    85 38 187
    86 46 195
    87 57 194
    88 63 188
    89 77 193
    90 85 194
    91  8 211
    92 12 217
    93 22 210
    94 34 216
    95 47 203
    96 58 213
    97 66 206
    98 78 210
    99 85 204];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME: st70
%TYPE: TSP
%COMMENT: 70-city problem (Smith/Thompson)
%DIMENSION: 70
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = st70()
name = 'st70';
bestKnownSol = 675;
m = 70;
xy = [...
    1 64 96
    2 80 39
    3 69 23
    4 72 42
    5 48 67
    6 58 43
    7 81 34
    8 79 17
    9 30 23
    10 42 67
    11 7 76
    12 29 51
    13 78 92
    14 64 8
    15 95 57
    16 57 91
    17 40 35
    18 68 40
    19 92 34
    20 62 1
    21 28 43
    22 76 73
    23 67 88
    24 93 54
    25 6 8
    26 87 18
    27 30 9
    28 77 13
    29 78 94
    30 55 3
    31 82 88
    32 73 28
    33 20 55
    34 27 43
    35 95 86
    36 67 99
    37 48 83
    38 75 81
    39 8 19
    40 20 18
    41 54 38
    42 63 36
    43 44 33
    44 52 18
    45 12 13
    46 25 5
    47 58 85
    48 5 67
    49 90 9
    50 41 76
    51 25 76
    52 37 64
    53 56 63
    54 10 55
    55 98 7
    56 16 74
    57 89 60
    58 48 82
    59 81 76
    60 29 60
    61 17 22
    62 5 45
    63 79 70
    64 9 100
    65 17 82
    66 74 67
    67 10 68
    68 48 19
    69 83 86
    70 84 94];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME: swiss42
%TYPE: TSP
%COMMENT: 42 Staedte Schweiz (Fricker)
%DIMENSION: 42
%EDGE_WEIGHT_TYPE: EXPLICIT
%EDGE_WEIGHT_FORMAT: FULL_MATRIX
%EDGE_WEIGHT_SECTION
function [name,m,C,bestKnownSol] = swiss42()
name = 'swiss42';
bestKnownSol = 1273;
m = 42;
C = diag(nan*ones(m,1)) + [...
    0  15  30  23  32  55  33  37  92 114  92 110  96  90  74  76  82  67  72  78  82 159 122 131 206 112  57  28  43  70  65  66  37 103  84 125 129  72 126 141 183 124
    15   0  34  23  27  40  19  32  93 117  88 100  87  75  63  67  71  69  62  63  96 164 132 131 212 106  44  33  51  77  75  72  52 118  99 132 132  67 139 148 186 122
    30  34   0  11  18  57  36  65  62  84  64  89  76  93  95 100 104  98  57  88  99 130 100 101 179  86  51   4  18  43  45  95  45 115  93 152 159 100 112 114 153  94
    23  23  11   0  11  48  26  54  70  94  69  89  75  84  84  89  92  89  54  78  99 141 111 109 190  89  44  11  29  54  56  89  47 118  96 147 151  90 122 126 163 101
    32  27  18  11   0  40  20  58  67  92  61  78  65  76  83  89  91  95  43  72 110 141 116 105 190  81  34  19  35  57  63  97  58 129 107 156 158  92 129 127 161  95
    55  40  57  48  40   0  23  55  96 123  78  75  62  36  56  66  63  95  37  34 137 174 156 129 224  90  15  59  75  96 103 105  91 158 139 164 156  78 169 163 191 115
    33  19  36  26  20  23   0  45  85 111  75  82  69  60  63  70  71  85  44  52 115 161 136 122 210  91  25  37  54  78  81  90  68 136 116 150 147  76 148 147 180 111
    37  32  65  54  58  55  45   0 124 149 118 126 113  80  42  42  49  40  87  60  94 195 158 163 242 135  65  63  79 106 101  50  66 118 104 109 103  36 160 178 218 153
    92  93  62  70  67  96  85 124   0  28  29  68  63 122 148 155 156 159  67 129 148  78  80  39 129  46  82  65  55  40  61 157  97 159 135 212 221 159 110  72  95  35
    114 117  84  94  92 123 111 149  28   0  54  91  88 150 174 181 182 181  95 157 159  50  65  27 102  65 110  87  73  50  68 176 112 166 142 229 241 184  99  46  69  38
    92  88  64  69  61  78  75 118  29  54   0  39  34  99 134 142 141 157  44 110 161 103 109  52 154  22  63  68  66  61  81 158 107 175 151 216 219 150 137 100 115  37
    110 100  89  89  78  75  82 126  68  91  39   0  14  80 129 139 135 167  39  98 187 136 148  81 186  28  61  92  97  98 117 173 134 204 181 232 229 153 176 137 143  62
    96  87  76  75  65  62  69 113  63  88  34  14   0  72 117 128 124 153  26  88 174 136 142  82 187  32  48  79  85  89 106 159 121 191 168 219 216 140 168 134 145  64
    90  75  93  84  76  36  60  80 122 150  99  80  72   0  59  71  63 116  56  25 170 201 189 151 252 104  44  95 111 130 138 130 127 192 174 186 172  90 205 193 214 135
    74  63  95  84  83  56  63  42 148 174 134 129 117  59   0  11   8  63  93  35 135 223 195 184 273 146  71  95 113 138 138  81 107 159 146 132 113  32 200 209 243 171
    76  67 100  89  89  66  70  42 155 181 142 139 128  71  11   0  11  54 103  46 130 230 198 192 279 155  80  99 117 143 141  74 107 155 143 122 102  22 202 215 250 179
    82  71 104  92  91  63  71  49 156 182 141 135 124  63   8  11   0  65 100  39 140 232 203 192 281 153  78 103 121 147 146  85 115 164 152 133 112  33 208 218 251 178
    67  69  98  89  95  95  85  40 159 181 157 167 153 116  63  54  65   0 127  92  83 224 180 199 269 175 106  95 109 135 125  21  80 107 100  71  63  33 173 205 249 191
    72  62  57  54  43  37  44  87  67  95  44  39  26  56  93 103 100 127   0  67 153 145 139  96 196  53  23  60  70  81  95 134 101 172 149 194 190 115 160 138 159  80
    78  63  88  78  72  34  52  60 129 157 110  98  88  25  35  46  39  92  67   0 152 207 188 162 258 119  48  89 107 129 134 108 114 176 159 163 147  66 200 197 224 147
    82  96  99  99 110 137 115  94 148 159 161 187 174 170 135 130 140  83 153 152   0 188 128 184 222 183 139  95  95 110  91  62  54  24  23  81 110 113 108 164 217 184
    159 164 130 141 141 174 161 195  78  50 103 136 136 201 223 230 232 224 145 207 188   0  65  57  51 109 160 132 116  90 102 217 148 188 168 264 281 231 100  26  30  75
    122 132 100 111 116 156 136 158  80  65 109 148 142 189 195 198 203 180 139 188 128  65   0  91  94 126 145 100  82  60  57 167  99 126 106 208 230 194  36  39  94 103
    131 131 101 109 105 129 122 163  39  27  52  81  82 151 184 192 192 199  96 162 184  57  91   0 106  53 115 104  94  74  94 196 134 192 168 251 260 197 126  64  64  19
    206 212 179 190 190 224 210 242 129 102 154 186 187 252 273 279 281 269 196 258 222  51  94 106   0 158 211 180 163 136 145 259 190 218 200 302 323 278 120  65  49 124
    112 106  86  89  81  90  91 135  46  65  22  28  32 104 146 155 153 175  53 119 183 109 126  53 158   0  75  89  88  83 103 178 129 197 173 236 238 166 156 111 115  34
    57  44  51  44  34  15  25  65  82 110  63  61  48  44  71  80  78 106  23  48 139 160 145 115 211  75   0  53  68  86  95 114  90 160 139 173 168  92 162 150 176 101
    28  33   4  11  19  59  37  63  65  87  68  92  79  95  95  99 103  95  60  89  95 132 100 104 180  89  53   0  18  44  45  92  42 112  89 149 156  99 111 116 155  97
    43  51  18  29  35  75  54  79  55  73  66  97  85 111 113 117 121 109  70 107  95 116  82  94 163  88  68  18   0  27  27 103  42 109  85 157 168 115  94  98 140  90
    70  77  43  54  57  96  78 106  40  50  61  98  89 130 138 143 147 135  81 129 110  90  60  74 136  83  86  44  27   0  21 128  62 119  96 179 192 142  79  72 115  74
    65  75  45  56  63 103  81 101  61  68  81 117 106 138 138 141 146 125  95 134  91 102  57  94 145 103  95  45  27  21   0 115  46  98  75 163 179 136  67  81 129  95
    66  72  95  89  97 105  90  50 157 176 158 173 159 130  81  74  85  21 134 108  62 217 167 196 259 178 114  92 103 128 115   0  69  86  81  60  65  54 158 195 243 190
    37  52  45  47  58  91  68  66  97 112 107 134 121 127 107 107 115  80 101 114  54 148  99 134 190 129  90  42  42  62  46  69   0  71  49 117 133  98  95 127 175 132
    103 118 115 118 129 158 136 118 159 166 175 204 191 192 159 155 164 107 172 176  24 188 126 192 218 197 160 112 109 119  98  86  71   0  24  94 127 137 100 163 218 194
    84  99  93  96 107 139 116 104 135 142 151 181 168 174 146 143 152 100 149 159  23 168 106 168 200 173 139  89  85  96  75  81  49  24   0 104 133 127  85 143 197 170
    125 132 152 147 156 164 150 109 212 229 216 232 219 186 132 122 133  71 194 163  81 264 208 251 302 236 173 149 157 179 163  60 117  94 104   0  39 100 190 241 292 246
    129 132 159 151 158 156 147 103 221 241 219 229 216 172 113 102 112  63 190 147 110 281 230 260 323 238 168 156 168 192 179  65 133 127 133  39   0  81 216 259 307 253
    72  67 100  90  92  78  76  36 159 184 150 153 140  90  32  22  33  33 115  66 113 231 194 197 278 166  92  99 115 142 136  54  98 137 127 100  81   0 193 214 253 187
    126 139 112 122 129 169 148 160 110  99 137 176 168 205 200 202 208 173 160 200 108 100  36 126 120 156 162 111  94  79  67 158  95 100  85 190 216 193   0  74 129 137
    141 148 114 126 127 163 147 178  72  46 100 137 134 193 209 215 218 205 138 197 164  26  39  64  65 111 150 116  98  72  81 195 127 163 143 241 259 214  74   0  55  80
    183 186 153 163 161 191 180 218  95  69 115 143 145 214 243 250 251 249 159 224 217  30  94  64  49 115 176 155 140 115 129 243 175 218 197 292 307 253 129  55   0  81
    124 122  94 101  95 115 111 153  35  38  37  62  64 135 171 179 178 191  80 147 184  75 103  19 124  34 101  97  90  74  95 190 132 194 170 246 253 187 137  80  81   0];


%NAME : u159
%COMMENT : Drilling problem (Reinelt)
%TYPE : TSP
%DIMENSION : 159
%EDGE_WEIGHT_TYPE : EUC_2D
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = u159()
name = 'u159';
bestKnownSol = 42080;
m = 159;
xy = [...
    1 3.30000e+03 2.20000e+03
    2 3.50000e+03 2.90000e+03
    3 3.30000e+03 2.90000e+03
    4 3.50000e+03 3.10000e+03
    5 3.50000e+03 3.30000e+03
    6 3.30000e+03 3.50000e+03
    7 3.50000e+03 3.70000e+03
    8 3.50000e+03 3.90000e+03
    9 3.50000e+03 4.00000e+03
    10 3.50000e+03 4.10000e+03
    11 3.50000e+03 4.30000e+03
    12 3.30000e+03 4.30000e+03
    13 3.50000e+03 4.50000e+03
    14 3.50000e+03 4.70000e+03
    15 3.50000e+03 4.80000e+03
    16 3.30000e+03 4.90000e+03
    17 3.50000e+03 5.00000e+03
    18 3.80000e+03 5.50000e+03
    19 3.90000e+03 5.70000e+03
    20 3.80000e+03 5.80000e+03
    21 3.70000e+03 5.80000e+03
    22 3.50000e+03 5.60000e+03
    23 3.50000e+03 5.70000e+03
    24 3.30000e+03 5.90000e+03
    25 3.50000e+03 6.10000e+03
    26 3.30000e+03 6.50000e+03
    27 3.50000e+03 6.40000e+03
    28 3.80000e+03 6.60000e+03
    29 4.50000e+03 6.50000e+03
    30 4.70000e+03 6.10000e+03
    31 4.30000e+03 5.70000e+03
    32 4.50000e+03 5.40000e+03
    33 5.10000e+03 5.30000e+03
    34 5.10000e+03 5.00000e+03
    35 5.00000e+03 5.00000e+03
    36 5.10000e+03 4.70000e+03
    37 5.00000e+03 4.70000e+03
    38 5.20000e+03 4.50000e+03
    39 5.50000e+03 4.40000e+03
    40 5.60000e+03 4.40000e+03
    41 5.50000e+03 4.10000e+03
    42 5.70000e+03 3.90000e+03
    43 5.90000e+03 4.10000e+03
    44 6.10000e+03 3.90000e+03
    45 6.30000e+03 4.10000e+03
    46 6.50000e+03 4.10000e+03
    47 6.70000e+03 4.10000e+03
    48 6.90000e+03 4.10000e+03
    49 7.00000e+03 4.50000e+03
    50 7.30000e+03 4.50000e+03
    51 7.30000e+03 4.70000e+03
    52 7.40000e+03 5.10000e+03
    53 7.70000e+03 5.50000e+03
    54 7.80000e+03 5.70000e+03
    55 7.30000e+03 6.20000e+03
    56 7.30000e+03 6.50000e+03
    57 7.60000e+03 6.50000e+03
    58 7.70000e+03 6.60000e+03
    59 8.10000e+03 6.60000e+03
    60 8.50000e+03 6.30000e+03
    61 8.50000e+03 6.00000e+03
    62 8.50000e+03 5.70000e+03
    63 8.20000e+03 5.70000e+03
    64 8.50000e+03 5.30000e+03
    65 8.50000e+03 5.20000e+03
    66 8.50000e+03 5.10000e+03
    67 8.50000e+03 5.00000e+03
    68 8.50000e+03 4.90000e+03
    69 8.50000e+03 4.80000e+03
    70 8.50000e+03 4.70000e+03
    71 8.50000e+03 4.60000e+03
    72 8.50000e+03 4.50000e+03
    73 8.20000e+03 4.60000e+03
    74 7.80000e+03 4.60000e+03
    75 7.70000e+03 4.30000e+03
    76 8.00000e+03 4.30000e+03
    77 8.10000e+03 4.00000e+03
    78 8.50000e+03 4.20000e+03
    79 8.50000e+03 4.10000e+03
    80 8.50000e+03 4.00000e+03
    81 8.50000e+03 3.90000e+03
    82 8.50000e+03 3.80000e+03
    83 8.50000e+03 3.70000e+03
    84 8.50000e+03 3.60000e+03
    85 8.50000e+03 3.50000e+03
    86 8.50000e+03 3.40000e+03
    87 8.20000e+03 3.20000e+03
    88 8.00000e+03 3.20000e+03
    89 7.80000e+03 3.40000e+03
    90 7.60000e+03 3.40000e+03
    91 7.40000e+03 3.40000e+03
    92 7.30000e+03 3.00000e+03
    93 7.30000e+03 2.80000e+03
    94 7.70000e+03 3.20000e+03
    95 8.00000e+03 2.90000e+03
    96 8.10000e+03 3.00000e+03
    97 8.50000e+03 3.10000e+03
    98 8.50000e+03 3.00000e+03
    99 8.50000e+03 2.90000e+03
    100 8.50000e+03 2.80000e+03
    101 8.50000e+03 2.70000e+03
    102 8.50000e+03 2.60000e+03
    103 8.50000e+03 2.50000e+03
    104 8.50000e+03 2.40000e+03
    105 8.50000e+03 2.30000e+03
    106 8.20000e+03 2.10000e+03
    107 7.80000e+03 2.10000e+03
    108 6.90000e+03 2.20000e+03
    109 6.70000e+03 2.30000e+03
    110 6.50000e+03 2.30000e+03
    111 6.30000e+03 2.30000e+03
    112 6.10000e+03 2.30000e+03
    113 5.90000e+03 2.30000e+03
    114 5.90000e+03 2.90000e+03
    115 6.10000e+03 2.90000e+03
    116 6.30000e+03 2.90000e+03
    117 6.50000e+03 2.90000e+03
    118 6.70000e+03 2.90000e+03
    119 6.70000e+03 3.50000e+03
    120 6.50000e+03 3.50000e+03
    121 6.30000e+03 3.50000e+03
    122 6.10000e+03 3.50000e+03
    123 5.90000e+03 3.50000e+03
    124 5.30000e+03 2.80000e+03
    125 4.70000e+03 2.10000e+03
    126 4.30000e+03 2.60000e+03
    127 4.70000e+03 2.90000e+03
    128 5.00000e+03 3.10000e+03
    129 5.10000e+03 2.90000e+03
    130 5.30000e+03 3.10000e+03
    131 5.00000e+03 3.40000e+03
    132 5.20000e+03 3.70000e+03
    133 5.00000e+03 3.90000e+03
    134 5.10000e+03 3.90000e+03
    135 5.10000e+03 4.20000e+03
    136 5.00000e+03 4.20000e+03
    137 4.70000e+03 4.40000e+03
    138 4.70000e+03 4.70000e+03
    139 4.30000e+03 4.40000e+03
    140 4.30000e+03 4.60000e+03
    141 4.10000e+03 4.40000e+03
    142 3.90000e+03 4.60000e+03
    143 3.70000e+03 4.40000e+03
    144 3.70000e+03 4.30000e+03
    145 3.80000e+03 4.30000e+03
    146 3.70000e+03 4.10000e+03
    147 3.70000e+03 4.00000e+03
    148 3.70000e+03 3.90000e+03
    149 3.80000e+03 4.00000e+03
    150 3.90000e+03 3.80000e+03
    151 3.70000e+03 3.70000e+03
    152 3.50000e+03 3.60000e+03
    153 3.50000e+03 3.50000e+03
    154 3.70000e+03 3.50000e+03
    155 3.80000e+03 3.50000e+03
    156 3.70000e+03 3.20000e+03
    157 3.80000e+03 3.20000e+03
    158 3.90000e+03 3.00000e+03
    159 3.50000e+03 2.40000e+03];
% Create the distance matrix for all of the cities given as EUC_2D!!!!!
distance_matrix = zeros(m) ;
for n_cities_x = 1: m,
    for n_cities_y = 1:n_cities_x
        x = xy(n_cities_x, 2) ;
        y = xy(n_cities_x, 3) ;
        xx = xy(n_cities_y, 2) ;
        yy = xy(n_cities_y, 3) ;
        distance_matrix(n_cities_x, n_cities_y)= ...
            ceil(sqrt((x - xx)^2 + (y - yy)^2)) ;
        distance_matrix(n_cities_y, n_cities_x)= ...
            distance_matrix(n_cities_x, n_cities_y) ;
    end
end
C = distance_matrix + diag(nan*ones(m,1));
% End of matrix construction

%NAME: ulysses16.tsp
%TYPE: TSP
%COMMENT: Odyssey of Ulysses (Groetschel/Padberg)
%DIMENSION: 16
%EDGE_WEIGHT_TYPE: GEO
%DISPLAY_DATA_TYPE: COORD_DISPLAY
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = ulysses16()
name = 'ulysses16';
bestKnownSol = 6859;
m = 16;
data = [...
    1 38.24 20.42
    2 39.57 26.15
    3 40.56 25.32
    4 36.26 23.12
    5 33.48 10.54
    6 37.56 12.19
    7 38.42 13.11
    8 37.52 20.44
    9 41.23 9.10
    10 41.17 13.05
    11 36.08 -5.21
    12 38.47 15.13
    13 38.15 15.35
    14 37.51 15.17
    15 35.49 14.32
    16 39.36 19.56];
% Convert data to geographical latitude and longitude
lat = zeros(size(data,1),1);
long = zeros(size(data,1),1);
for i=1:size(data,1)
    deg = fix(data(i,2));
    min = data(i,2)-deg;
    lat(i) = pi*(deg+5*min/3)/180;
    deg = fix(data(i,3));
    min = data(i,3)-deg;
    long(i) = pi*(deg+5*min/3)/180;
end

% Generate cost (distant) matrix C
radius = 6378.388; % Earth radius in kilometers
C=NaN*ones(m,m);
for i=1:m
    for j=(i+1):m
        q1 = cos(long(i)-long(j));
        q2 = cos(lat(i)-lat(j));
        q3 = cos(lat(i)+lat(j));
        dij = fix( (radius * acos( 0.5*((1+q1)*q2-(1-q1)*q3) ) ) + 1 );
        C(i,j)=dij;
        C(j,i)=dij;
    end
end

%NAME: ulysses22.tsp
%TYPE: TSP
%COMMENT: Odyssey of Ulysses (Groetschel/Padberg)
%DIMENSION: 22
%EDGE_WEIGHT_TYPE: GEO
%DISPLAY_DATA_TYPE: COORD_DISPLAY
%NODE_COORD_SECTION
function [name,m,C,bestKnownSol] = ulysses22()
name = 'ulysses22';
bestKnownSol = 7013;
m = 22;
data = [...
    1 38.24 20.42
    2 39.57 26.15
    3 40.56 25.32
    4 36.26 23.12
    5 33.48 10.54
    6 37.56 12.19
    7 38.42 13.11
    8 37.52 20.44
    9 41.23 9.10
    10 41.17 13.05
    11 36.08 -5.21
    12 38.47 15.13
    13 38.15 15.35
    14 37.51 15.17
    15 35.49 14.32
    16 39.36 19.56
    17 38.09 24.36
    18 36.09 23.00
    19 40.44 13.57
    20 40.33 14.15
    21 40.37 14.23
    22 37.57 22.56];
% Convert data to geographical latitude and longitude
lat = zeros(size(data,1),1);
long = zeros(size(data,1),1);
for i=1:size(data,1)
    deg = fix(data(i,2));
    min = data(i,2)-deg;
    lat(i) = pi*(deg+5*min/3)/180;
    deg = fix(data(i,3));
    min = data(i,3)-deg;
    long(i) = pi*(deg+5*min/3)/180;
end

% Generate cost (distant) matrix C
radius = 6378.388; % Earth radius in kilometers
C=NaN*ones(m,m);
for i=1:m
    for j=(i+1):m
        q1 = cos(long(i)-long(j));
        q2 = cos(lat(i)-lat(j));
        q3 = cos(lat(i)+lat(j));
        dij = fix( (radius * acos( 0.5*((1+q1)*q2-(1-q1)*q3) ) ) + 1 );
        C(i,j)=dij;
        C(j,i)=dij;
    end
end

function [c, A, b_L, b_U, x_L, x_U, IntVars] = makeInput(C1)

if nargin < 1
    error('The function requires 1 input');
end

if isempty(C1)
    error('The input is empty');
end

n1 = size(C1,1); % Batches, slots
n  = n1*n1 + n1;

C1 = C1(:);

% FORMULATE PROBLEM
% All slots are integers
IntVars = logical([ones(n1*n1,1);zeros(n1,1)]);
x_L     = zeros(n,1);
x_U     = [ones(n1*n1,1);inf*ones(n1,1)];

for i=1:n1+1:n1*n1
    x_U(i,1) = 0;
end

% Only one transition at a given time
A1 = sparse(n1,n);
for i=1:n1
    A1(i,(i-1)*n1+1:i*n1) = ones(1,n1);
end
b_L1 = ones(n1,1);
b_U1 = ones(n1,1);

% Only one transition to a given batch
A2 = sparse(n1,n);
for i=1:n1
    A2(i,i:n1:n1*n1-n1+i) = ones(1,n1);
end
b_L2 = ones(n1,1);
b_U2 = ones(n1,1);

% Sub-cycle constraint
n2 = n1*(n1-1)-(n1-1);
A3 = sparse(n2,n);
counter = 1;
for i=1:n1
    for j=2:n1
        if i~=j
            A3(counter, [n1*n1+j, n1*n1+i, i+(j-1)*n1]) = [1 -1 -n1];
            counter = counter + 1;
        end
    end
end
b_L3 = (1-n1)*ones(n2,1);
b_U3 = inf*ones(n2,1);

% Add A, b_L, b_U
A = [A1;A2;A3];
b_L = [b_L1;b_L2;b_L3];
b_U = [b_U1;b_U2;b_U3];

% Objective
c = [C1;zeros(n1,1)];

% MODIFICATION LOG
%
% 080603  med  Switched to conAssign, cleaned