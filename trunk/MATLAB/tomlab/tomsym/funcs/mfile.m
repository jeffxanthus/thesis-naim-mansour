function tempD = mfile(o,name,dir,tdn,idx,xscale,yscaler,yscalec,xUsed)
% mfile - Encode a tomSym and write the code to a file
%
% TEMPD = mfile(O,NAME) encodes the object o into a file NAME.m in the
% current directory
%
% TEMPD = MFILE(O,NAME,DIR) stores the file in the directory DIR.
% If DIR is on the Matlab path, the function can then be called from Matlab.
%
% The returned TEMPD cell array contains temporary results, and must be
% supplied when calling the created function.
%
% After the file has been created, type "help NAME" to see the list of
% arguments that it should be called with. (Arguments are sorted in ascii
% order based on their names. TEMPD will always be the last argument.)
%
% If a script should both create a file and then run it, the directory that
% the file is created in must be added to the matlab path using addpath
% after the file has been created. Otherwise Matlab will not find the new
% file until the script ends.
%
% See also: mcode, subs

% Arguments used by sym2prob:
%
% TDN = name of substruct to tomSym where temp data will be stored. If this
% is supplied, then the generated function will expect a Prob struct.
%
% IDX = indexes into tempX where the symbols are to be found.
%
% XSCALE = name of the vector that is used for input scaling.
% YSCALER = name of the vector that is used for scaling output rows
% YSCALEC = name of the vector that is used for scaling output columns
% XUSED = index of last element in x that is used.
% (For d2c, YSCALER and YSCALEC are used differently.)

% Per Rutquist, Tomlab Optimization Inc, E-mail: tomlab@tomopt.com
% Copyright (c) 2008-2010 by Tomlab Optimization Inc.
% Last modified 2010-11-04 by rutquist for TOMLAB release 7.7

if nargin<3 || isempty(dir)
    dir = pwd;
end
if nargin<4
    % tdn is used for generating a function to use with Tomlab.
    tdn = [];
end
if nargin<6
    xscale = [];
end
if nargin<7
    yscaler = [];
end
if nargin<8
    yscalec = [];
end
if nargin<9
    xUsed = [];
end

if length(name)>=2 && strcmp(name(end-1:end),'.m')
    name = name(1:end-2);
end

[code, tempD, header] = mcode(o,name);

agf = sprintf('%% %s - Autogenerated file.\n%%\n%% %s', ...
    name, header(10:end));

file = fullfile(dir, [name '.m']);
[h,message] = fopen(file,'w');
if(h==-1)
    error(['Error creating temporary file: ' message]);
end
if isempty(tdn)
    fprintf(h,'%s\n%s\n%s',header,agf,code);
else
    if strcmp(tdn,'d2c')
        % Create a d2c function, which takes a lambda vector as input
        fprintf(h,'function out = %s(tempX,tempLam,Prob)\n%s\n', name, agf);
        if(strfind(code,'tempD'))
            fprintf(h,'tempD=Prob.tomSym.%s;\n',tdn);
        end
        if ~isempty(yscaler)
            fprintf(h,'tempLam = tempLam.*%s;\n',yscaler);
        end
    else
        % Create a standard tomlab function (f, g, c, dc)
        fprintf(h,'function out = %s(tempX,Prob)\n%s\n', name, agf);
        if(strfind(code,'tempD'))
            fprintf(h,'tempD=Prob.tomSym.%s;\n',tdn);
        end
    end
    if isa(o,'tomSym') % Otherwise o is a constant.
        if ~isempty(xscale)
            fprintf(h,'tempX = tempX.*%s;\n',xscale);
        end
        sys = symbols(o,'struct');
        sy  = fieldnames(sys);
        for i=1:length(sy)
            if ~strcmp(sy{i},'tempLam');
                syo = sys.(sy{i});
                isi = idx.(sy{i});
                if numel(syo)==1
                    fprintf(h,'%s = tempX(%d);\n',sy{i},isi);
                else
                    if ~isempty(xUsed) && isi(end)>xUsed
                        % Only use first part of a vector if the last part
                        % is not used (as it may not be provided.)
                        if isi(1) <= xUsed
                            fprintf(h,'%s = reshape([tempX(%d:%d); zeros(%d,1)],%d,%d);\n',...
                                sy{i},isi(1),xUsed,isi(end)-xUsed,size(syo,1),size(syo,2));
                        else
                            error(['TomSym internal error: symbol ' char(sy{i}) ' marked as unused.']);
                        end
                    else
                        fprintf(h,'%s = reshape(tempX(%d:%d),%d,%d);\n',...
                            sy{i},isi(1),isi(end),size(syo,1),size(syo,2));
                    end
                end
            end
        end
    end
    fprintf(h,'%s',code);
    if strcmp(tdn,'d2c')
        if ~isempty(yscalec)
            fprintf(h,'out = out.*(%s*%s'');\n',yscalec,yscalec);
        end
    else
        if ~isempty(yscaler)
            if ~isempty(yscalec)
                fprintf(h,'out = out.*(%s*%s'');\n',yscaler,yscalec);
            else
                fprintf(h,'out = scalerows(%s,out);\n',yscaler);
            end
        elseif ~isempty(yscalec)
            fprintf(h,'out = scalecolumns(%s,out);\n',yscalec);
        end
    end
end

fclose(h);
