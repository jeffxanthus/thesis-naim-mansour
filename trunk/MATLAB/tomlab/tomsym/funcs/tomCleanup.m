function tomCleanup(Prob)
% tomCleanup - Remove any temporary files created for a tomSym problem.
%
% tomCleanup(Prob) removes any temporary files (created by sym2prob) that
% are referenced in the problem structure Prob. This should be done after a
% problem has been solved, to avoid leaving garbage in the system's "temp"
% directory (although most modern operating system will clean up these
% files eventually anyway.)
%
%  WARNING: IF THE AUTOGENERATED FILES HAVE BEEN EDITED, THEN RUNNING
%           TOMCLEANUP WILL CAUSE ALL CHANGES TO BE LOST.
%
% tomCleanup('all') will remove all files and directories that are judged
% to be tomSym files from the system's "temp" directory. All files that
% contain a certain "marker" in the filename will be removed. This might
% be useful if a large number of temporary files were created accidentally,
% such as when running sym2prob inside a for-loop without calling
% tomCleanup(Prob) at the end of the loop.
%
%  Note: Under normal circumstances there is never a need to run
%        tomCleanup('all'). The operating system should remove old temporary
%        files as required.
%
% After running tomCleanup, all Prob structures that reference the deleted
% files will be useless.
%
% Note: Under certain versions of Windows, tomCleanup may fail because the
% indexing service is acessing the files that tomCleanup wants to delete.
% This problem can be avoided by turning off the indexing service for the
% temporary directory that Matlab uses.
%
% See also: sym2prob tempdir

% Per Rutquist, Tomlab Optimization Inc, E-mail: tomlab@tomopt.com
% Copyright (c) 2008-2009 by Tomlab Optimization Inc.
% Last modified 2009-10-06 by rutquist for TOMLAB release 7.7

if nargin==0
    error('Specify a Prob stuct to clean up, or "all" to clean everything'); 
end

if isstruct(Prob) && isfield(Prob,'tomSym') && ...
        isfield(Prob.tomSym,'tempdir')
    tdir = Prob.tomSym.tempdir;

    if ~isempty(strfind(path,tdir))
        rmpath(tdir);
    end

    if exist(tdir,'dir')
        % Iterate through the FUNCS struct and remove all files.
        if isfield(Prob,'FUNCS')
            fl = fieldnames(Prob.FUNCS);
            for i=1:length(fl)
                f = Prob.FUNCS.(fl{i});
                if ischar(f) && ~isempty(f)
                    f = fullfile(tdir,[f '.m']);
                    if exist(f,'file')
                        delete(f);
                    end
                end
            end
        end
        if ~rmdir(tdir) && isunix
            % Bug in rmdir in Matlab 6.5 under Linux?
            unix(['rmdir ' tdir]);
        end
    end
elseif ischar(Prob) && strcmpi(Prob,'all')
    % Delete all temporary tomSym directories.
    mtdir = tempdir; % Matlab's routine to determine the system's "temp" dir.
    list = dir(mtdir);
    marker = tomtempname('marker');
    disp(['TOMCLEANUP will attempt to remove all directories matching *' marker '*' 10 ...
        'from the directory ' mtdir]);
    pause(2);
    for i=1:length(list)
        % Only remove directories containing the "marker" string.
        if list(i).isdir && ~isempty(strfind(list(i).name, marker))
            tdir = fullfile(mtdir,list(i).name);
            % Remove directory from matlab path, if it is there.
            if ~isempty(strfind(path,tdir))
                rmpath(tdir);
            end
            flist = dir(tdir);
            % Only cleanup directories containing 10+2 entries or less.
            if length(flist)<12
                for j=1:length(flist)
                    % Only remove .m files.
                    if length(flist(j).name)>2 && ...
                            strcmp(flist(j).name(end-1:end),'.m')
                        ffn = fullfile(tdir,flist(j).name);
                        disp(['Deleting: ' ffn]);
                        delete(ffn);
                    end
                end
            end
            disp(['Removing directory: ' tdir]);
            if ~rmdir(tdir) && isunix
                % Bug in rmdir Matlab 6.5 under Linux?
                unix(['rmdir ' tdir]);
            end
        end
    end
end
